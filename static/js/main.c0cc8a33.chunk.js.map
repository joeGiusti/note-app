{"version":3,"sources":["logo.svg","components/Header.js","components/CircleButton.js","components/FloatingMenu.js","components/SpeechButtons.js","components/NoteEdit.js","components/Notes.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","children","CircleButton","onClick","additionalClasses","defaultProps","FloatingMenu","containerClasses","SpeechButtons","play","pause","paused","stop","NoteEdit","setTextArea","toSet","document","getElementById","value","setTitle","useEffect","noteString","title","id","closeFunction","saveFunction","testFunction","console","log","Notes","app","db","useState","setData","setSetData","noteStringState","setNoteStringState","noteArray","setNoteArray","showNoteEdit","setShowNoteEdit","noteEditKeyState","setNoteEditKeyState","setPaused","running","setRunning","counter","timeInterval","functios","speakFunction","speak","loadSet","onValue","ref","snap","modNoteString","replaceAll","split","createNoteArray","val","editSet","key","index","textToSpeek","utter","SpeechSynthesisUtterance","text","window","speechSynthesis","next","length","setTimeout","pauseFunction","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","getDatabase","setNamesRef","setsData","forEach","childSnap","push","loadSetNames","newRef","set","newSet","map","data","i","Number","newString","noteLine","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0cc8a33.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"header\">\r\n            {props.children}\r\n            {/* <button onClick={props.functios.speakFunction}>Text</button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction CircleButton(props) {\r\n    return (\r\n        <div onClick={props.onClick} className={\"circleButton \"+props.additionalClasses}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nCircleButton.defaultProps={\r\n    onClick:()=>{},\r\n}\r\nexport default CircleButton","import React from 'react'\r\n\r\nfunction FloatingMenu(props) {\r\n    return (\r\n        <div className={\"floatingMenuContainer \"+props.containerClasses}>\r\n            <div className=\"floatingMenu\">\r\n                {props.children}                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FloatingMenu\r\n","import React from 'react'\r\n\r\nfunction SpeechButtons(props) {\r\n    return (\r\n        <div className=\"speechButtonsDivOuter\">\r\n            <div className=\"speechButtonsDiv\">\r\n                <button className=\"button\" onClick={props.play}>\r\n                    Play\r\n                </button>\r\n                <button className=\"button\" onClick={props.pause}>\r\n                    {props.paused ? \"Resume\" : \"Pause\"}\r\n                </button>\r\n                <button className=\"button\" onClick={props.stop}>\r\n                    Stop\r\n                </button>            \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\nSpeechButtons.defaultProps={\r\n    play:()=>{},\r\n    pause:()=>{},\r\n    stop:()=>{},\r\n}\r\nexport default SpeechButtons\r\n\r\n","import React from 'react'\r\nimport {useEffect} from 'react'\r\n\r\nfunction NoteEdit(props) {    \r\n    function inputChangedHandler (event) {\r\n        const updatedKeyword = event.target.value;\r\n        // May be call for search result\r\n    }\r\n    function setTextArea(toSet){\r\n        document.getElementById(\"ta\").value = toSet        \r\n    }\r\n    function setTitle(toSet){\r\n        document.getElementById(\"titleInput\").value = toSet\r\n    }\r\n    useEffect(() => {\r\n        setTextArea(props.noteString)\r\n        setTitle(props.title)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n    return (\r\n        <div id=\"mainDiv\" className={\"noteEdit \"}>\r\n            <button className=\"closeButton\" onClick={props.closeFunction}>x</button>\r\n            <input id=\"titleInput\"></input>\r\n            <textarea id=\"ta\">\r\n\r\n            </textarea>\r\n            <div className=\"buttonContainer\">\r\n                <button className=\"button\">Cancel</button>\r\n                <button onClick={()=>setTextArea(props.noteString), ()=>setTitle(props.title)} className=\"button\">Load</button>\r\n                <button onClick={()=>props.saveFunction(document.getElementById(\"ta\").value)} className=\"button\">Save</button>                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nNoteEdit.defaultProps = {\r\n    closeFunction:()=>{},\r\n    testFunction:()=>{console.log(\"no test functio sent\")},\r\n    title:\"title not sent\",\r\n}\r\n\r\nexport default NoteEdit\r\n","import React from 'react'\r\nimport {useState} from 'react'\r\nimport {useEffect} from 'react'\r\nimport {initializeApp} from 'firebase/app'\r\nimport {getDatabase, ref, onValue, set, push} from 'firebase/database'\r\nimport Header from './Header.js'\r\nimport CircleButton from './CircleButton.js'\r\nimport FloatingMenu from './FloatingMenu.js'\r\nimport SpeechButtons from './SpeechButtons.js'\r\nimport NoteEdit from './NoteEdit.js'\r\n\r\nfunction Notes(props) {\r\n    \r\n    /* #region State Variables */        \r\n    const [setData, setSetData] = useState([])    \r\n    const [noteStringState, setNoteStringState] = useState(\"\")\r\n    const [noteArray, setNoteArray] = useState([])\r\n    const [showNoteEdit, setShowNoteEdit] = useState(false)\r\n    const [noteEditKeyState, setNoteEditKeyState] = useState()\r\n    const [title, setTitle] = useState(\"title\")\r\n    const [paused, setPaused] = useState(false)\r\n    const [running, setRunning] = useState(false)\r\n\r\n    /* #endregion */\r\n\r\n    /* #region Variables */  \r\n    var counter = 0        \r\n    var app, db\r\n    var timeInterval = 8000\r\n    var functios = {\r\n        speakFunction: ()=>speak(\"test\"),\r\n        \r\n    }\r\n    /* #endregion */\r\n\r\n    /* #region Firebase Init & Initial Load */    \r\n    app = initializeApp({\r\n        apiKey: \"AIzaSyBDWCKZwSBi_Qp4U0u3D2tKrcIU290IrDE\",\r\n        authDomain: \"defaultproject-c023e.firebaseapp.com\",\r\n        databaseURL: \"https://defaultproject-c023e-default-rtdb.firebaseio.com\",\r\n        projectId: \"defaultproject-c023e\",\r\n        storageBucket: \"defaultproject-c023e.appspot.com\",\r\n        messagingSenderId: \"147977670881\",\r\n        appId: \"1:147977670881:web:fe1532718095f374bbe7a0\",\r\n        measurementId: \"G-VY1DMS0BKY\"\r\n      }) \r\n    db = getDatabase(app)\r\n    useEffect(()=>{\r\n        // Need to put this here to avoid infinite refresh                \r\n        loadSetNames()\r\n        document.getElementById(\"timeIntervalInput\").value = \"8000\"\r\n    },\r\n    [])\r\n    function loadSetNames(){\r\n        var setNamesRef = ref(db, \"note-app/set-names\")\r\n        onValue(setNamesRef, snap => {\r\n\r\n            var setsData = []\r\n            snap.forEach(childSnap => {\r\n                setsData.push({\r\n                    key:childSnap.key,\r\n                    value:childSnap.val()\r\n                })\r\n\r\n            })\r\n\r\n            setSetData(setsData)\r\n        })\r\n    }\r\n    /* #endregion */\r\n\r\n    /* #region Load Functions */    \r\n    function loadSet(id){\r\n        //setNoteString(\r\n        onValue(ref(db,\"note-app/note-sets/\"+id), snap=>{            \r\n            createNoteArray(snap.val())\r\n            return true\r\n        })\r\n    }  \r\n    function loadSetForEdit(id){\r\n        //setNoteString(\r\n        onValue(ref(db,\"note-app/note-sets/\"+id), snap=>{            \r\n            setNoteStringState(snap.val())            \r\n            setNoteEditKeyState(id)            \r\n        })\r\n    }    \r\n    function createNoteArray(noteString){\r\n        if(noteString == null)\r\n            return\r\n        \r\n        var modNoteString = noteString\r\n        modNoteString = modNoteString.replaceAll(\" \",\", \")\r\n        modNoteString = modNoteString.replaceAll(\"  \",\" \")\r\n        modNoteString = modNoteString.replaceAll(\"=>\",\" arrow, \")        \r\n        modNoteString = modNoteString.replaceAll(\" , \",\"comma, \")\r\n        modNoteString = modNoteString.replaceAll(\"(\",\" par, \")\r\n        modNoteString = modNoteString.replaceAll(\"[\",\" square, \")\r\n        modNoteString = modNoteString.replaceAll(\"{\",\" curley, \")\r\n        modNoteString = modNoteString.replaceAll(\" -\",\" dash \")\r\n        \r\n        setNoteArray(modNoteString.split(\"\\n\"))\r\n    }\r\n    /* #endregion */\r\n\r\n    /* #region Mod Functions */    \r\n    function newSet(){\r\n        // add in set-names with id that push returns\r\n        // or put it under /set-names/(push id)/set name\r\n        // better second way bc when deleting it will k where it is\r\n        var newRef = push(ref(db, \"note-app/set-names\"))\r\n        \r\n        // Make a new entry in the note-title branch\r\n        set(newRef, \"New Note\")\r\n\r\n        // make a new entry in the note-sets branch\r\n        set(ref(db, \"note-app/note-sets/\"+newRef.key), \"new note text goes here\")\r\n\r\n        // update state\r\n        setNoteStringState(\"\")\r\n    }\r\n    function editSet(key, index){\r\n        //console.log(\"editing set \"+key)\r\n        // load into noteString state\r\n        loadSetForEdit(key)        \r\n        \r\n        setTitle(setData[index])\r\n        console.log(\"index: \"+index+\" setData[\"+index+\"] = \"+setData[index])\r\n\r\n        // show components that has the note string in it\r\n        setShowNoteEdit(true)\r\n    }\r\n    function saveNoteEdit(newString){\r\n        console.log(\"new string: \"+newString)\r\n        // use editNoteSnap.key and set()   \r\n        set(ref(db, \"note-app/note-sets/\"+noteEditKeyState), newString)        \r\n    }\r\n    function deleteSet(key){\r\n\r\n    }\r\n    function closeEditWindow(){        \r\n        setShowNoteEdit(false)\r\n    }\r\n    /* #endregion */\r\n\r\n    /* #region Speak Functions */  \r\n    function speak(textToSpeek){\r\n        var utter = new SpeechSynthesisUtterance()\r\n        utter.text = textToSpeek\r\n        window.speechSynthesis.speak(utter)\r\n    }\r\n    function test(){\r\n        speak(\"test\")\r\n    }\r\n    function startReadingNotes(){\r\n        if(running)\r\n            return\r\n\r\n        setRunning(true)\r\n        \r\n        if(noteArray.length == 0){\r\n            speak(\"loading first note set\")\r\n            loadSet(1)\r\n            setRunning(false)\r\n            return\r\n        }        \r\n        //setPaused(false)\r\n        next()\r\n    }\r\n\r\n    function next(){\r\n        \r\n        if(paused)\r\n            return\r\n\r\n        // read current note\r\n        if(counter >= (noteArray.length))\r\n            counter = 0\r\n        speak(noteArray[counter])\r\n\r\n        // increment counter\r\n        counter++\r\n        if(counter >= (noteArray.length))\r\n            counter = 0\r\n\r\n        // call again\r\n        setTimeout(next, timeInterval)\r\n\r\n    }\r\n    \r\n    function pauseFunction(){\r\n        setPaused(true)  \r\n        setRunning(false)                   \r\n    }\r\n    function resumeFunction(){\r\n        setPaused(false)\r\n        setRunning(true)                   \r\n        next()\r\n    }\r\n    function stopFunction(){\r\n        pauseFunction()\r\n        counter = 0             \r\n    }\r\n    /* #endregion */\r\n\r\n    /* #region Settings Functions */  \r\n    function setTimeInterval(){\r\n        timeInterval = Number(document.getElementById(\"timeIntervalInput\").value)        \r\n    }\r\n    /* #endregion */\r\n\r\n    /* #region Name */  \r\n    /* #endregion */\r\n\r\n    // Return JSX\r\n    return (\r\n        <div>\r\n            <Header functios={functios}>\r\n                <CircleButton>\r\n                    <FloatingMenu containerClasses=\" sideMenu\">\r\n                        <div className=\"setNameTitle\">\r\n                                Note Sets\r\n                        </div>\r\n                        <div className=\"setNameDivContainer\">\r\n                            <div className=\"setNameDiv\" onClick={()=>newSet()}>+ New Set +</div> \r\n                            {                        \r\n                                setData.map((data, i)=>(\r\n                                    <div className=\"setNameDiv\" onClick={()=>loadSet(data.key, i)} key={data.key}>\r\n                                        {data.value}\r\n                                        <CircleButton \r\n                                            onClick={()=>editSet(data.key)}\r\n                                            additionalClasses=\"circleButtonInline\"\r\n                                        >\r\n\r\n                                        </CircleButton>\r\n                                    </div> \r\n                                ))\r\n                            }\r\n                        </div>\r\n                        \r\n                        <div>\r\n                            <input id=\"timeIntervalInput\"></input>\r\n                            <button onClick={setTimeInterval}>Set Time Interval</button>\r\n                        </div>\r\n                    </FloatingMenu>\r\n                </CircleButton>\r\n                <CircleButton>\r\n                    <FloatingMenu containerClasses=\" floatingMenuRight\"></FloatingMenu>\r\n                </CircleButton>\r\n\r\n            </Header>\r\n            <SpeechButtons \r\n                play={startReadingNotes} \r\n                pause={paused ? resumeFunction : pauseFunction}\r\n                stop={stopFunction}\r\n                paused = {paused}\r\n            ></SpeechButtons>\r\n            {showNoteEdit &&\r\n                <NoteEdit \r\n                    noteString={noteStringState}                     \r\n                    closeFunction={closeEditWindow}                \r\n                    saveFunction ={saveNoteEdit}\r\n                    testFunction = {test}\r\n                    title = {title}\r\n                ></NoteEdit>\r\n            }\r\n            {noteArray.length == 0 ? (<div>Load notes from left to begin</div>) : \"\" } \r\n            {noteArray.length == 0 ? props.children : \"\" }                         \r\n            \r\n            <div className=\"noteLineContainer\">\r\n                {noteArray.map((noteLine, index)=>(\r\n                    <div className=\"noteLineDiv\" key={index}>{index+\": \"+noteLine}</div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Notes from './components/Notes.js'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Notes>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </Notes>\n      {/* <Notes></Notes> */}\n      {/* <header className=\"App-header\">\n        \n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}